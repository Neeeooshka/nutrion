from typing import Dict, Any
from services.llm_orchestrator import LLMOrchestrator

class AgentManager:
    def __init__(self, llm_orchestrator: LLMOrchestrator):
        self.orchestrator = llm_orchestrator
        self.agents = self._initialize_agents()
    
    def _initialize_agents(self) -> Dict[str, Any]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        from .nutrition import NutritionAgent
        from .planning import PlanningAgent
        
        return {
            "nutrition": NutritionAgent(self.orchestrator),
            "planning": PlanningAgent(self.orchestrator),
            "simple": self.orchestrator  # –ü—Ä–æ—Å—Ç–æ–π –∞–≥–µ–Ω—Ç –∫–∞–∫ fallback
        }
    
    async def route_request(self, user_query: str, agent_type: str = "auto") -> str:
        """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –Ω—É–∂–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É"""
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞
        if agent_type == "auto":
            agent_type = await self._detect_agent_type(user_query)
        
        agent = self.agents.get(agent_type, self.agents["simple"])
        return await agent.process_query(user_query)
    
        async def _detect_agent_type(self, query: str) -> str:
            """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
            prompt = f"""
            –û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
            "{query}"
            
            –í–∞—Ä–∏–∞–Ω—Ç—ã:
            - nutrition: –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é, –∫–∞–ª–æ—Ä–∏—è–º, –ë–ñ–£, –¥–∏–µ—Ç–∞–º
            - planning: —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–æ–≤, –ø—Ä–æ–≥—Ä–∞–º–º, –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–µ —Ü–µ–ª–∏  
            - simple: –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—â–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            
            –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ: nutrition, planning –∏–ª–∏ simple
            """
            
            response = await self.orchestrator.ask(prompt)
            
            # –ò–ó–í–õ–ï–ö–ê–ï–ú –¢–ï–ö–°–¢ –ò–ó –°–õ–û–í–ê–†–Ø
            if isinstance(response, dict) and 'answer' in response:
                agent_type = response['answer'].strip().lower()
            elif isinstance(response, str):
                agent_type = response.strip().lower()
            else:
                agent_type = "simple"  # fallback
            
            logger.info(f"üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø –∞–≥–µ–Ω—Ç–∞: {agent_type} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}")
            return agent_type