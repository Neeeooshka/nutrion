from typing import Dict, Any
import logging
from services.llm_orchestrator import LLMOrchestrator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger("nutrition-llm")

class AgentManager:
    def __init__(self, llm_orchestrator: LLMOrchestrator):
        self.orchestrator = llm_orchestrator
        self.agents = self._initialize_agents()
    
    def _initialize_agents(self) -> Dict[str, Any]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ —Å –¥–≤—É–º—è LLM —Å–µ—Ä–≤–∏—Å–∞–º–∏"""
        from .nutrition import NutritionAgent
        from .planning import PlanningAgent
        from .simple import SimpleAgent
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        from services.ollama_service import OllamaService
        import os
        
        fast_llm = OllamaService(model=os.getenv("OLLAMA_FAST_MODEL"))
        quality_llm = OllamaService(model=os.getenv("OLLAMA_MODEL"))
        
        return {
            "nutrition": NutritionAgent(fast_llm, quality_llm),
            "planning": PlanningAgent(fast_llm, quality_llm),
            "simple": SimpleAgent(self.orchestrator)  # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        }
    
    async def route_request(self, user_query: str, agent_type: str = "auto") -> dict:
        """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –Ω—É–∂–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞
        if agent_type == "auto":
            agent_type = await self._detect_agent_type(user_query)
        
        agent = self.agents.get(agent_type, self.agents["simple"])
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥–∞—á—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç—É
        agent_name = agent.__class__.__name__
        logger.info(f"üîÑ –ü–µ—Ä–µ–¥–∞—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É: {agent_name} (—Ç–∏–ø: {agent_type})")
        logger.info(f"üìù –ó–∞–ø—Ä–æ—Å: {user_query}")
        
        answer = await agent.process_query(user_query)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞
        logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç {agent_name} –∑–∞–≤–µ—Ä—à–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É")
        
        if answer.startswith("–û—à–∏–±–∫–∞:"):
            logger.warning(f"‚ùå {answer}")
        
        return {
            "answer": "" if answer.startswith("–û—à–∏–±–∫–∞:") else answer,
            "agent_type": agent_type,
            "agent_name": agent_name,
            "status": "error" if answer.startswith("–û—à–∏–±–∫–∞:") else "success",
            "error": answer if answer.startswith("–û—à–∏–±–∫–∞:") else ""
        }
    
    async def _detect_agent_type(self, query: str) -> str:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
        prompt = f"""
        –û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
        "{query}"
        
        –í–∞—Ä–∏–∞–Ω—Ç—ã:
        - nutrition: –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é, –∫–∞–ª–æ—Ä–∏—è–º, –ë–ñ–£, –¥–∏–µ—Ç–∞–º
        - planning: —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–æ–≤, –ø—Ä–æ–≥—Ä–∞–º–º, –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–µ —Ü–µ–ª–∏  
        - simple: –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—â–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        
        –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ: nutrition, planning –∏–ª–∏ simple
        """
        
        response = await self.orchestrator.ask(prompt)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        if isinstance(response, dict) and 'answer' in response:
            agent_type = response['answer'].strip().lower()
        elif isinstance(response, str):
            agent_type = response.strip().lower()
        else:
            agent_type = "simple"  # fallback
        
        logger.info(f"üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø –∞–≥–µ–Ω—Ç–∞: {agent_type} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}")
        return agent_type