# llm/agents/simple.py
import logging
from .base import BaseAgent

logger = logging.getLogger("nutrition-llm")

class SimpleAgent(BaseAgent):
    @property
    def name(self) -> str:
        return "simple"
    
    @property
    def description(self) -> str:
        return "–ê–≥–µ–Ω—Ç –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –æ–±—â–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π, –ø—Ä–∏—á–∏–Ω, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."
    
    @property
    def keywords(self) -> List[str]:
        return ["–ø—Ä–∏—á–∏–Ω", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü", "–Ω–∞—É—á", "—á—Ç–æ –±—É–¥–µ—Ç –µ—Å–ª–∏", "–ø—Ä–∞–≤–¥–∞ –ª–∏", "–ø–æ—á–µ–º—É"]
    
    def __init__(self, llm_orchestrator):
        self.orchestrator = llm_orchestrator
    
    async def process_query(self, user_query: str) -> str:
        """–ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ - –Ω–∞–ø—Ä—è–º—É—é –∫ LLM"""
        logger.info(f"üí¨ SimpleAgent –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å: {user_query}")
        
        try:
            # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ orchestrator
            response = await self.orchestrator.ask(user_query)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            if isinstance(response, dict) and 'answer' in response:
                return response['answer']
            elif isinstance(response, dict) and 'error' in response:
                return f"–û—à–∏–±–∫–∞: {response['error']}"
            else:
                return str(response)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ SimpleAgent: {e}")
            return f"–û—à–∏–±–∫–∞: {str(e)}"