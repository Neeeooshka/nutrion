from aiogram import Router, types, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.enums import ChatAction
from backend.llm_memory import ask_llm
from backend.llm_history import add_to_memory
from backend.llm_profile import get_profile
from handlers.profile import start_profile_flow
from config.thinking import get_random_phrase
import logging
import asyncio

message_router = Router()
logger = logging.getLogger(__name__)

@message_router.message(~F.text.startswith("/"))
async def handle_message(msg: types.Message, state: FSMContext):
    
    chat_id = msg.chat.id
    user_id = msg.from_user.id
    
    profile = await get_profile(chat_id, user_id)
    if not profile:
        # –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∫–µ—Ç—É
        logger.info("–ó–∞–ø—Ä–æ—Å —Å –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º")
        await start_profile_flow(msg, state)
        return
        
    user_input = msg.text
    try:
        # –§—Ä–∞–∑–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
        await msg.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        thinking_text = get_random_phrase()
        await asyncio.sleep(1)
        await msg.answer(thinking_text)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å (LLM)
        await msg.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        answer = await ask_llm(chat_id, user_id, user_input)
        await add_to_memory(chat_id, user_id, user_input, answer)
        
        # –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
        await msg.answer(answer)
        logger.info("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç LLM")
        
    except Exception as e:
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ üòï")
        logger.exception(e)
