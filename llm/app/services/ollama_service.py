import os
import asyncio
import aiohttp
import json
import logging
from .llm_service import BaseLLMService
from config import SYSTEM_PROMPT, TEMPERATURE, MAX_TOKENS

OLLAMA_HOST = os.getenv("OLLAMA_HOST", "http://localhost:11434")

class OllamaService(BaseLLMService):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Ollama"""
    
    def __init__(self, model: str = None):
        self.model = model or os.getenv("OLLAMA_MODEL", "qwen2.5:1.5b")  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å
        self._is_available = False
        self.logger = logging.getLogger("nutrition-llm")
        self._buffer = ""  # –ë—É—Ñ–µ—Ä –¥–ª—è –Ω–µ–ø–æ–ª–Ω—ã—Ö JSON

    async def ask(self, prompt: str, context: str = "") -> dict:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Ollama —á–µ—Ä–µ–∑ HTTP —Å—Ç—Ä–∏–º"""
        self.logger.info(f"‚öôÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Ollama ({self.model}) —á–µ—Ä–µ–∑ aiohttp")
        
        url = f"{OLLAMA_HOST}/api/chat"
        payload = {
            "model": self.model,
            "messages": [
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}\n\n–í–æ–ø—Ä–æ—Å: {prompt}"},
            ],
            "options": {
                "temperature": TEMPERATURE,
                "num_predict": MAX_TOKENS
            },
            "stream": True
        }
        
        text_accum = ""
        try:
            async with aiohttp.ClientSession() as session:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
                timeout = aiohttp.ClientTimeout(total=300)  # 5 –º–∏–Ω—É—Ç
                
                async with session.post(url, json=payload, timeout=timeout) as resp:
                    if resp.status != 200:
                        error_text = await resp.text()
                        self.logger.error(f"–û—à–∏–±–∫–∞ HTTP {resp.status}: {error_text}")
                        return self._format_error(f"HTTP {resp.status}: {error_text}")
                    
                    async for chunk_bytes in resp.content.iter_any():
                        if not chunk_bytes:
                            continue
                            
                        chunk_text = chunk_bytes.decode('utf-8')
                        self._buffer += chunk_text
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª–Ω—ã–µ JSON –æ–±—ä–µ–∫—Ç—ã –∏–∑ –±—É—Ñ–µ—Ä–∞
                        while '\n' in self._buffer:
                            line, self._buffer = self._buffer.split('\n', 1)
                            line = line.strip()
                            if not line:
                                continue
                                
                            try:
                                chunk_data = json.loads(line)
                            except json.JSONDecodeError as e:
                                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON: {line}, –æ—à–∏–±–∫–∞: {e}")
                                continue
                            
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞–Ω–∫–∞
                            if "message" in chunk_data and "content" in chunk_data["message"]:
                                piece = chunk_data["message"]["content"]
                                text_accum += piece
                                self.logger.debug(f"üí¨ –ü–æ–ª—É—á–µ–Ω —á–∞–Ω–∫: {piece.strip()}")
                            
                            if chunk_data.get("done", False):
                                self.logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–æ–π {len(text_accum)} —Å–∏–º–≤–æ–ª–æ–≤")
                                self._buffer = ""  # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
                                return self._format_response(text_accum, self.model)
                    
                    # –ï—Å–ª–∏ –ø–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –Ω–æ –º—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ done
                    if text_accum:
                        self.logger.info(f"‚ö†Ô∏è –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ —Ñ–ª–∞–≥–∞ done. –û—Ç–≤–µ—Ç: {len(text_accum)} —Å–∏–º–≤–æ–ª–æ–≤")
                        return self._format_response(text_accum, self.model)
                    else:
                        return self._format_error("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏")
                        
        except asyncio.TimeoutError:
            self.logger.warning("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Ollama")
            return self._format_error("–ò—Å—Ç–µ–∫ —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç –º–æ–¥–µ–ª–∏")
        except aiohttp.ClientError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Ollama: {e}")
            return self._format_error(str(e))
        except Exception as e:
            self.logger.exception(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return self._format_error(str(e))

    async def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Ollama"""
        url = f"{OLLAMA_HOST}/api/tags"
        self.logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Ollama...")
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=aiohttp.ClientTimeout(total=10)) as resp:
                    if resp.status == 200:
                        self._is_available = True
                        self.logger.info(f"‚úÖ Ollama –¥–æ—Å—Ç—É–ø–µ–Ω")
                        return True
                    else:
                        self.logger.warning(f"‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ç–∞—Ç—É—Å: {resp.status}")
                        self._is_available = False
                        return False
        except Exception as e:
            self.logger.warning(f"‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self._is_available = False
            return False

    async def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Ollama"""
        return await self.health_check()