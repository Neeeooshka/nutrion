# llm/agents/planning.py
import asyncio
from typing import List, Dict, Any, Optional
from .base import BaseAgent
import logging
import os

logger = logging.getLogger("nutrition-llm")

class PlanningAgent(BaseAgent):
    @property
    def name(self) -> str:
        return "planning"
    
    @property
    def description(self) -> str:
        return "–ê–≥–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–æ–≤, –ø—Ä–æ–≥—Ä–∞–º–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã—Ö —Ü–µ–ª–µ–π."
    
    @property
    def keywords(self) -> List[str]:
        return ["—Ç—Ä–µ–Ω–∏—Ä", "–ø—Ä–æ–≥—Ä–∞–º–º", "–ø–ª–∞–Ω", "—Ä–∞—Å—Ö–æ–¥ —ç–Ω–µ—Ä–≥–∏", "–ø—Ä–æ–ø—É—Å–∫", "—Å–æ—Å—Ç–∞–≤—å", "—Ä–∞—Å–ø–∏—à", "–∑–∞–ª", "—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω"]
    
    def __init__(self, fast_llm_service, quality_llm_service):
        self.fast_llm = fast_llm_service  # –î–ª—è –ø–æ–¥–∑–∞–¥–∞—á
        self.quality_llm = quality_llm_service  # –î–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        self.conversation_history = []
    
    async def process_query(self, user_query: str) -> str:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        logger.info(f"üìã PlanningAgent –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å: {user_query}")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            result = await self.execute_plan(user_query)
            return result
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ PlanningAgent: {e}")
            return f"–û—à–∏–±–∫–∞: {str(e)}"
    
    async def execute_plan(self, user_goal: str) -> str:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞"""
        logger.info(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏: {user_goal}")
        
        # –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ (–±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å)
        plan = await self._create_plan(user_goal)
        logger.info(f"üìã –ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {plan}")
        
        # –®–∞–≥ 2: –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–æ–≤ (–±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å)
        tasks = [self._execute_step(step, user_goal) for step in plan]
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        valid_results = []
        for i, result in enumerate(results):
            if isinstance(result, Exception):
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ {plan[i]}: {result}")
            else:
                valid_results.append(result)
        
        # –®–∞–≥ 3: –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∏–Ω—Ç–µ–∑ (–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å)
        final_result = await self._create_final_report(user_goal, valid_results)
        return final_result
    
    async def _create_plan(self, goal: str) -> List[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ª–∏ (–±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å)"""
        prompt = f"""
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç: {goal}
        
        –°–æ–∑–¥–∞–π –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —ç—Ç–æ–π —Ü–µ–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ñ–∏—Ç–Ω–µ—Å–∞ –∏ –ø–∏—Ç–∞–Ω–∏—è.
        –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —à–∞–≥–∏ –≤ –≤–∏–¥–µ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
        """
        
        response = await self.fast_llm.ask(prompt)
        response_text = response.get("answer", "") if isinstance(response, dict) else response
        
        # –ü–∞—Ä—Å–∏–º –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        steps = [line.strip() for line in response_text.split('\n') if line.strip() and line[0].isdigit()]
        return [step[3:].strip() for step in steps if '. ' in step]  # –£–±–∏—Ä–∞–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é
    
    async def _execute_step(self, step: str, context: str) -> str:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞ –ø–ª–∞–Ω–∞ (–±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å)"""
        prompt = f"""
        –û–±—â–∞—è —Ü–µ–ª—å: {context}
        –¢–µ–∫—É—â–∏–π —à–∞–≥: {step}
        
        –î–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ —à–∞–≥–∞.
        –ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º.
        """
        
        response = await self.fast_llm.ask(prompt)
        return response.get("answer", "") if isinstance(response, dict) else response
    
    async def _create_final_report(self, goal: str, step_results: List[str]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å)"""
        prompt = f"""
        –ò—Å—Ö–æ–¥–Ω–∞—è —Ü–µ–ª—å: {goal}
        
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–æ–≤:
        {chr(10).join([f"–®–∞–≥ {i+1}: {result}" for i, result in enumerate(step_results)])}
        
        –°–æ–∑–¥–∞–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å:
        1. –ö—Ä–∞—Ç–∫–∏–º —Ä–µ–∑—é–º–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        2. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        3. –ü–ª–∞–Ω–æ–º –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        4. –î–∞–ª—å–Ω–µ–π—à–∏–º–∏ —à–∞–≥–∞–º–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è
        
        –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
        """
        
        response = await self.quality_llm.ask(prompt)
        return response.get("answer", "") if isinstance(response, dict) else response