import os
import sys
import logging
from fastapi import FastAPI, Request, HTTPException
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.types import Update
from aiogram.filters import Command
from backend.llm_memory import ask_llm  # –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π
from backend.db import connect, disconnect
from backend.llm_history import add_to_memory, get_history

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env ---
API_TOKEN = os.getenv("TELEGRAM_TOKEN")
LLM_URL = os.getenv("LLM_URL")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
TG_SECRET_TOKEN = os.getenv("TG_SECRET_TOKEN")
INTERNAL_API_KEY = os.getenv("INTERNAL_API_KEY")


# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ ---
sys.stdout.reconfigure(line_buffering=True)
sys.stderr.reconfigure(line_buffering=True)

logging.getLogger("aiogram").setLevel(logging.INFO)
logging.getLogger("aiogram").handlers = [logging.StreamHandler(sys.stdout)]

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler(sys.stdout)],
    force=True  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
)
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
app = FastAPI()

# --- –†–æ—É—Ç–µ—Ä—ã ---
command_router = Router()
message_router = Router()

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start (—Å–∞–º—ã–π —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π)
@command_router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ù—É—Ç—Ä–∏–æ–Ω ‚Äî —Ç–≤–æ–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º\n–•–æ—á–µ—à—å, —è –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –∏ —Å–æ—Å—Ç–∞–≤–ª—é –º–µ–Ω—é\n–∏–ª–∏ —Ä–∞—Å–ø–∏—à—É –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –º–æ—â–Ω–æ–π –±–∏—Ü—É—Ö–∏ –∏–ª–∏ —è–≥–æ–¥–∏—Ü—ã?")


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ
@message_router.message(F.photo)
async def handle_photo(message: types.Message):
    await message.answer("–≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—á–µ–Ω—å –≤–∫—É—Å–Ω–æ! –°–∫–æ—Ä–æ —è –Ω–∞—É—á—É—Å—å —Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏, –∞ –ø–æ–∫–∞ –º–æ–∂–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å –º–Ω–µ –µ—â–µ —Ñ–æ—Ç–æ–∫ ;-)")
    
# --- –•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /history ---
@command_router.message(Command("history"))
async def handle_history(msg: types.Message):
    chat_id = msg.chat.id
    user_id = msg.from_user.id

    try:
        parts = msg.text.strip().split()
        num = int(parts[1]) if len(parts) > 1 else 3
        num = min(num, 10)
    except ValueError:
        await msg.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /history {—á–∏—Å–ª–æ}")
        return

    rows = await get_history(chat_id, user_id, num)
    if not rows:
        await msg.answer("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞—è üòï")
        return

    history_text = ""
    for i, row in enumerate(rows, 1):
        history_text += f"{i}. –¢—ã: {row['user_message']}\n   AI: {row['ai_response']}\n\n"

    await msg.answer(history_text.strip())

# --- –•—ç–Ω–¥–ª–µ—Ä –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
@message_router.message(~F.text.startswith("/"))
async def handle_message(msg: types.Message):
    chat_id = msg.chat.id
    user_id = msg.from_user.id
    user_input = msg.text
    try:
        answer = await ask_llm(chat_id, user_id, user_input)
        await add_to_memory(chat_id, user_id, user_input, answer)
        await msg.answer(answer)
    except Exception as e:
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ üòï")
        logger.exception(e)

# --- –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –∫ Dispatcher ---
dp.include_router(command_router)
dp.include_router(message_router)

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ---
@app.on_event("startup")
async def startup():
    await connect()
    await bot.set_webhook(WEBHOOK_URL, secret_token=TG_SECRET_TOKEN)
    webhook_info = await bot.get_webhook_info()
    if webhook_info.url != WEBHOOK_URL:
        await bot.set_webhook(WEBHOOK_URL, secret_token=TG_SECRET_TOKEN)
        logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

# --- –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –±–∞–∑—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ ---
@app.on_event("shutdown")
async def shutdown():
    await bot.session.close()
    await disconnect()

# --- –ü—Ä–∏–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram ---
@app.post("/webhook")
async def telegram_webhook(request: Request):
    token = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
    if token != TG_SECRET_TOKEN:
        raise HTTPException(status_code=403, detail="Forbidden")

    update_data = await request.json()
    print(update_data)
     # --- üß© –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É, –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏ —Ç.–¥.) ---
    if "my_chat_member" in update_data or "chat_member" in update_data:
        logger.info("–ò–≥–Ω–æ—Ä–∏—Ä—É—é —Å–∏—Å—Ç–µ–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞)")
        return {"ok": True}

    message = update_data.get("message")
    if message:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if "new_chat_members" in message or "left_chat_member" in message:
            logger.info("–ò–≥–Ω–æ—Ä–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/—É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞")
            return {"ok": True}
                
    try:
        update = Update.model_validate(update_data, context={"bot": bot})
        await dp.feed_update(bot, update)
    except Exception as e:
        logger.info(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")  # –û—Ç–ª–∞–¥–∫–∞
    return {"ok": True}
