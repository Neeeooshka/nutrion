import logging
from typing import Dict
from .openai_service import OpenAIService
from .ollama_service import OllamaService

logger = logging.getLogger("nutrition-llm")

class LLMOrchestrator:
    """
    –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö.
    """
    
    def __init__(self):
        self.services: Dict[str, BaseLLMService] = {
            "openai": OpenAIService(),
            "ollama": OllamaService()
        }
        self.current_provider = "ollama"
        self.openai_errors_count = 0
        self.MAX_OPENAI_ERRORS = 3
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("üîß Initializing LLM Orchestrator...")
        
        for name, service in self.services.items():
            is_available = await service.is_available()
            status = "‚úÖ" if is_available else "‚ùå"
            logger.info(f"  {status} {name}: {'available' if is_available else 'unavailable'}")
    
    async def ask(self, prompt: str, context: str = "") -> dict:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º"""
        logger.info(f"üì® –ó–∞–ø—Ä–æ—Å. –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {self.current_provider}")
        
        # –ü—Ä–æ–±—É–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        current_service = self.services[self.current_provider]
        
        if await current_service.is_available():
            result = await current_service.ask(prompt, context)
            
            # –ï—Å–ª–∏ —É—Å–ø–µ—Ö –æ—Ç OpenAI - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            if self.current_provider == "openai" and "error" not in result:
                self.openai_errors_count = 0
            
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
            if "error" in result:
                return await self._handle_error(result, prompt, context)
            
            return result
        else:
            # –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
            return await self._switch_provider_and_retry(prompt, context)
    
    async def _handle_error(self, error_result: dict, prompt: str, context: str) -> dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º"""
        provider = error_result["provider"]
        error_msg = error_result["error"]
        
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {provider}: {error_msg}")
        
        if provider == "openai":
            return await self._handle_openai_error(error_msg, prompt, context)
        elif provider == "ollama":
            return await self._handle_ollama_error(error_msg, prompt, context)
        
        return error_result
    
    async def _handle_openai_error(self, error: str, prompt: str, context: str) -> dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ OpenAI"""
        self.openai_errors_count += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–æ—Ç—É
        if any(keyword in str(error).lower() for keyword in ["quota", "429", "insufficient_quota"]):
            self.services["openai"]._is_available = False
            logger.error("üí∏ –ó–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –∫–≤–æ—Ç–∞ OpenAI! –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä.")
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Ollama –ø—Ä–∏ —á–∞—Å—Ç—ã—Ö –æ—à–∏–±–∫–∞—Ö
        if self.openai_errors_count >= self.MAX_OPENAI_ERRORS:
            if await self.services["ollama"].is_available():
                self.current_provider = "ollama"
                logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ Ollama –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ OpenAI")
                return await self.services["ollama"].ask(prompt, context)
        
        return self.services["openai"]._format_error(error)
    
    async def _handle_ollama_error(self, error: str, prompt: str, context: str) -> dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Ollama"""
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Ollama: {error}")
        
        # –ü—Ä–æ–±—É–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ OpenAI
        if await self.services["openai"].is_available():
            self.current_provider = "openai"
            logger.info("üîÑ –ü—Ä–æ–±—É–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ OpenAI...")
            return await self.services["openai"].ask(prompt, context)
        
        return self.services["ollama"]._format_error(error)
    
    async def _switch_provider_and_retry(self, prompt: str, context: str) -> dict:
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞"""
        for provider_name, service in self.services.items():
            if provider_name != self.current_provider and await service.is_available():
                self.current_provider = provider_name
                logger.info(f"üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ {provider_name}")
                return await service.ask(prompt, context)
        
        # –í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
        return {"error": "–í—Å–µ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", "provider": "none"}
    
    async def switch_provider(self, provider: str) -> bool:
        """–†—É—á–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        if provider in self.services and await self.services[provider].is_available():
            self.current_provider = provider
            logger.info(f"üîÑ –†—É—á–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ {provider}")
            return True
        return False
    
    async def health_check(self) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        health_status = {}
        
        for name, service in self.services.items():
            is_healthy = await service.health_check()
            health_status[name] = is_healthy
        
        overall_health = any(health_status.values())
        
        return {
            "status": "healthy" if overall_health else "unhealthy",
            "current_provider": self.current_provider,
            "services": health_status
        }
    
    def get_status(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        return {
            "current_provider": self.current_provider,
            "openai_errors_count": self.openai_errors_count,
            "max_openai_errors": self.MAX_OPENAI_ERRORS,
            "models": {
                "openai": self.services["openai"].model,
                "ollama": self.services["ollama"].model
            }
        }