# handlers/profile.py
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from backend.llm_profile import save_profile, get_profile

profile_router = Router()

# --- FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã ---
class ProfileForm(StatesGroup):
    gender = State()
    age = State()
    weight = State()
    goal = State()
    diet = State()


# --- FSM –Ω–∞—á–∞–ª–æ –∞–Ω–∫–µ—Ç—ã ---
async def start_profile_flow(msg: types.Message, state: FSMContext):
    await state.clear()
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ù—É—Ç—Ä–∏–æ–Ω ‚Äî —Ç–≤–æ–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º.\n\n"
        "–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –ø–æ–±–ª–∏–∂–µ ‚Äî –æ—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã —è –º–æ–≥ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è üí™\n\n"
    )
    await msg.answer(text, parse_mode="Markdown")
    await msg.answer("üîπ –£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª (–º/–∂):")
    await state.set_state(ProfileForm.gender)
    
# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@profile_router.message(Command("start"))
async def cmd_start(msg: types.Message, state: FSMContext):
    await start_profile_flow(msg, state)

# --- FSM —à–∞–≥–∏ –∞–Ω–∫–µ—Ç—ã ---
@profile_router.message(ProfileForm.gender)
async def process_gender(msg: types.Message, state: FSMContext):
    gender = msg.text.strip().lower()
    if gender not in ["–º", "–∂"]:
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ **–º** –∏–ª–∏ **–∂** üôÇ", parse_mode="Markdown")
        return
    await state.update_data(gender=gender)
    await msg.answer("üìÖ –£–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç (–≤ –≥–æ–¥–∞—Ö):")
    await state.set_state(ProfileForm.age)

@profile_router.message(ProfileForm.age)
async def process_age(msg: types.Message, state: FSMContext):
    if not msg.text.isdigit() or int(msg.text) < 10 or int(msg.text) > 100:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 10 –¥–æ 100).")
        return
    await state.update_data(age=int(msg.text))
    await msg.answer("‚öñÔ∏è –£–∫–∞–∂–∏ —Å–≤–æ–π –≤–µ—Å (–≤ –∫–≥):")
    await state.set_state(ProfileForm.weight)

@profile_router.message(ProfileForm.weight)
async def process_weight(msg: types.Message, state: FSMContext):
    try:
        weight = float(msg.text.replace(",", "."))
    except ValueError:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä `72.5` –∫–≥.", parse_mode="Markdown")
        return
    await state.update_data(weight=weight)
    await msg.answer("üéØ –ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å?\n\n1Ô∏è‚É£ –ü–æ—Ö—É–¥–µ—Ç—å\n2Ô∏è‚É£ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É\n3Ô∏è‚É£ –ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É")
    await state.set_state(ProfileForm.goal)

@profile_router.message(ProfileForm.goal)
async def process_goal(msg: types.Message, state: FSMContext):
    goals = {"1": "–ü–æ—Ö—É–¥–µ—Ç—å", "2": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É", "3": "–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É"}
    goal = goals.get(msg.text.strip()) or msg.text.strip().capitalize()
    await state.update_data(goal=goal)
    await msg.answer("ü•ó –ö–∞–∫–æ–µ —É —Ç–µ–±—è –ø–∏—Ç–∞–Ω–∏–µ?\n–ù–∞–ø—Ä–∏–º–µ—Ä: '–í—Å–µ—è–¥–Ω—ã–π', '–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω–µ—Ü', '–ö–µ—Ç–æ' –∏ —Ç.–¥.")
    await state.set_state(ProfileForm.diet)

@profile_router.message(ProfileForm.diet)
async def process_diet(msg: types.Message, state: FSMContext):
    await state.update_data(diet=msg.text.strip())
    data = await state.get_data()
    chat_id = msg.chat.id
    user_id = msg.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await save_profile(chat_id, user_id, data)
    await state.clear()

    summary = (
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –Ø –∑–∞–ø–æ–º–Ω–∏–ª —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"üë§ –ü–æ–ª: {data['gender'].upper()}\n"
        f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {data['age']} –ª–µ—Ç\n"
        f"‚öñÔ∏è –í–µ—Å: {data['weight']} –∫–≥\n"
        f"üéØ –¶–µ–ª—å: {data['goal']}\n"
        f"ü•ó –ü–∏—Ç–∞–Ω–∏–µ: {data['diet']}\n\n"
        "–•–æ—á–µ—à—å, —è –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –∏ —Å–æ—Å—Ç–∞–≤–ª—é –º–µ–Ω—é\n"
        "–∏–ª–∏ —Ä–∞—Å–ø–∏—à—É –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –º–æ—â–Ω–æ–π –±–∏—Ü—É—Ö–∏ –∏–ª–∏ —è–≥–æ–¥–∏—Ü—ã? üçëüí™\n"
    )
    await msg.answer(summary)

# --- –ö–æ–º–∞–Ω–¥–∞ /profile ---
@profile_router.message(Command("profile"))
async def cmd_profile(msg: types.Message):
    chat_id = msg.chat.id
    user_id = msg.from_user.id
    data = await get_profile(chat_id, user_id)
    if not data:
        await msg.answer("–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É.")
        return

    profile_text = (
        f"üë§ *–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:*\n\n"
        f"–ü–æ–ª: {data['gender'].upper()}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
        f"–í–µ—Å: {data['weight']} –∫–≥\n"
        f"–¶–µ–ª—å: {data['goal']}\n"
        f"–ü–∏—Ç–∞–Ω–∏–µ: {data['diet']}\n\n"
        "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /start –∏ –ø—Ä–æ–π–¥–∏ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ üí°"
    )
    await msg.answer(profile_text, parse_mode="Markdown")

# --- –ö–æ–º–∞–Ω–¥–∞ /help ---
@profile_router.message(Command("help"))
async def cmd_help(msg: types.Message):
    text = (
        "üìò *–ß—Ç–æ —è —É–º–µ—é:*\n\n"
        "ü§ñ –î–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º\n"
        "üçé –ü–æ–º–æ–≥–∞—Ç—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£ –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –º–µ–Ω—é\n"
        "üì∏ (–≤ –±—É–¥—É—â–µ–º) –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –µ–¥—É –ø–æ —Ñ–æ—Ç–æ\n"
        "üß† –ó–∞–ø–æ–º–∏–Ω–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –∏ —Ç–≤–æ–∏ —Ü–µ–ª–∏\n\n"
        "üìç –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É\n"
        "/profile ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é\n"
    )
    await msg.answer(text, parse_mode="Markdown")
